# Ultralytics YOLO 🚀, GPL-3.0 license

# Parameters
nc: 80  # number of classes
depth_multiple: 0.33  # scales module repeats
width_multiple: 0.25  # scales convolution channels

# YOLOv8.0n backbone
# from -1代表对上一层进行操作（上一个序号的层），即 上一层的输出为这一层的输入
# repeats 重复的次数, module 模块, args 参数
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2     k=3, s=2  【640*640*3 -> 320*320*64】
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4   【320*320*64 -> 160*160*128】
  - [-1, 3, C2f, [128, True]]   # 2        【160*160*128】
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8   【160*160*128 -> 80*80*256】
  - [-1, 6, C2f, [256, True]]   # 4        【80*80*256】
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16  【80*80*256 -> 40*40*512】
  - [-1, 6, C2f, [512, True]]   # 6        【40*40*512】
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32 【40*40*512 -> 20*20*512】
  - [-1, 3, C2f, [1024, True]]  # 8        【20*20*512】
  - [-1, 1, SPPF, [1024, 5]]  # 9          【20*20*512】
  - [-1, 1, CBAMBlock, [16, 49]] # 10

# 注意：
#   1.model   model名"MHSA"是必须要和nn/MHSA.py文件中的class名一样
#   2.args    这个attention需要传入通道数, 参数[14, 14, 4]分别与class参数 width=14, height=14, heads=4 相对应


# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat, [1]]  # cat backbone P4
  - [-1, 3, C2f, [512]]  # 13

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]  # cat backbone P3
  - [-1, 3, C2f, [256]]  # 16 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 13], 1, Concat, [1]]  # cat head P4
  - [-1, 3, C2f, [512]]  # 19 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 10], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [1024]]  # 22 (P5/32-large)

  - [[16, 19, 22], 1, Detect, [nc]]  # Detect(P3, P4, P5)


# 添加了层之后, 之后每一层的编号也会对应改变
# 之后的每层, 只要原来层的编号在9及其以上的( >=9 ), 都需要+1
